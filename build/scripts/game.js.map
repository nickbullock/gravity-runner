{
  "version": 3,
  "sources": [
    "node_modules/browser-pack/_prelude.js",
    "src/index.js",
    "src/objects/Helicopter.js",
    "src/objects/MovingWalls.js",
    "src/states/Boot.js",
    "src/states/GameOver.js",
    "src/states/GameTitle.js",
    "src/states/Levels.js",
    "src/states/Main.js",
    "src/states/Menu.js",
    "src/states/Preload.js"
  ],
  "names": [],
  "mappings": "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",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "import Boot from 'states/Boot';\nimport Preload from 'states/Preload';\nimport GameTitle from 'states/GameTitle';\nimport Main from 'states/Main';\nimport Menu from 'states/Menu';\nimport Levels from 'states/Levels';\nimport GameOver from 'states/GameOver';\n\nclass Game extends Phaser.Game {\n\n    constructor() {\n\n        super(window.innerWidth * window.devicePixelRatio, window.innerHeight * window.devicePixelRatio, Phaser.AUTO);\n\n        this.state.add('Boot', Boot, false);\n        this.state.add('Preload', Preload, false);\n        this.state.add('GameTitle', GameTitle, false);\n        this.state.add('Menu', Menu, false);\n        this.state.add('Levels', Levels, false);\n        this.state.add('Main', Main, false);\n        this.state.add('GameOver', GameOver, false);\n\n        this.state.start('Boot');\n    }\n\n}\n\nnew Game();\n",
    "class Helicopter {\n\n    constructor(game){\n        this.game = game;\n        this.isRising = false;\n        this.sprite = null;\n    }\n\n    spawn(){\n\n        let helicopterSprite = new Phaser.Graphics(this.game)\n            .beginFill(Phaser.Color.hexToRGB('#2c3e50'), 1)\n            .drawRect(0, 0, 100, 100);\n\n        let helicopterSpriteTexture = helicopterSprite.generateTexture();\n\n        this.sprite = this.game.add.sprite(this.game.world.centerX, this.game.world.centerY, helicopterSpriteTexture);\n        this.game.physics.arcade.enable(this.sprite);\n        this.sprite.enableBody = true;\n\n        this.sprite.body.gravity.y = 5000;\n        this.sprite.body.velocity.y = -1500;\n        this.sprite.body.collideWorldBounds = false;\n\n        this.sprite.anchor.setTo(0.5, 0.5);\n\n    }\n\n    setRising(){\n        this.isRising = true;\n    }\n\n    setFalling(){\n        this.isRising = false;\n    }\n\n    increaseVerticalVelocity(){\n        this.sprite.body.velocity.y -= 200;\n    }\n\n    isOutOfBounds(){\n\n        let position = this.sprite.body.position.y;\n\n        return position > this.game.world.height || position < 0;\n\n    }\n\n}\n\nexport default Helicopter;",
    "class MovingWalls {\n\n    constructor(game){\n\n        this.game = game;\n        this.wallGroup = null;\n        this.spriteGroup = null;\n        this.wallSpeed = 300;\n\n        let seed = Date.now();\n        this.random = new Phaser.RandomDataGenerator([seed]);\n\n        this.initWalls();\n    }\n\n    initWalls(){\n\n        this.wallHeight = this.random.integerInRange(20, this.game.world.height / 3);\n        this.wallWidth = 200;\n\n        let wallSprite = new Phaser.Graphics(this.game)\n            .beginFill(Phaser.Color.hexToRGB('#e74c3c'), 1)\n            .drawRect(0, 0, this.wallWidth, this.wallHeight);\n\n        let wallSpriteTexture = wallSprite.generateTexture();\n\n        this.spriteGroup = this.game.add.group();\n        this.spriteGroup.enableBody = true;\n        this.spriteGroup.createMultiple(10, wallSpriteTexture);\n\n    }\n\n    spawn(){\n\n        let wall = this.spriteGroup.getFirstDead();\n\n        wall.body.gravity.y = 0;\n\n        wall.reset(this.game.world.width, this.random.integerInRange(0, this.game.world.height));\n\n        wall.body.velocity.x = -this.wallSpeed;\n        wall.body.immovable = true;\n\n        //When the block leaves the screen, kill it\n        wall.checkWorldBounds = true;\n        wall.outOfBoundsKill = true;\n\n    }\n\n}\n\nexport default MovingWalls;",
    "class Boot extends Phaser.State {\n\n\tpreload() {\n\n\t}\n\n\tcreate() {\n\t\tthis.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;\n\t\tthis.game.state.start(\"Preload\");\n\t}\n\n}\n\nexport default Boot;",
    "class GameOver extends Phaser.State {\n\n\tcreate() {\n\n\t}\n\n\trestartGame() {\n\t\tthis.game.state.start(\"Main\");\n\t}\n\n}\n\nexport default GameOver;\n",
    "class GameTitle extends Phaser.State {\n\n\tcreate() {\n\n\t}\n\n\tstartGame() {\n\t\tthis.game.state.start(\"Main\");\n\t}\n\n}\n\nexport default GameTitle;\n",
    "class Levels extends Phaser.State {\n\n    create() {\n\n    }\n\n    startGame() {\n        this.game.state.start(\"Levels\");\n    }\n\n}\n\nexport default Levels;",
    "import Helicopter from 'objects/Helicopter';\nimport MovingWalls from 'objects/MovingWalls';\n\nclass Main extends Phaser.State {\n\n    create() {\n\n        //Enable Arcade Physics\n        this.game.physics.startSystem(Phaser.Physics.ARCADE);\n\n        //Set the games background colour\n        this.game.stage.backgroundColor = '#cecece';\n\n        this.helicopter = new Helicopter(this.game);\n        this.helicopter.spawn();\n\n        this.walls = new MovingWalls(this.game);\n\n        this.addControls();\n        this.addTimers();\n    }\n\n    update() {\n\n        this.game.physics.arcade.overlap(this.helicopter.sprite, this.walls.spriteGroup, this.gameOver, null, this);\n\n        // Check if out of bounds\n        if(this.helicopter.isOutOfBounds()){\n            this.gameOver();\n        }\n\n        // Check if  helicopter is rising\n        if(this.helicopter.isRising){\n            this.helicopter.increaseVerticalVelocity();\n        }\n\n    }\n\n    addControls(){\n        this.game.input.onDown.add(this.helicopter.setRising, this.helicopter);\n        this.game.input.onUp.add(this.helicopter.setFalling, this.helicopter);\n    }\n\n    addTimers(){\n        this.game.time.events.loop(2000, this.walls.spawn, this.walls);\n    }\n\n    gameOver(){\n        this.game.state.restart();\n    }\n\n}\n\nexport default Main;",
    "class Menu extends Phaser.State {\n\n\tcreate() {\n\n\t}\n\n\tstartGame() {\n\t\tthis.game.state.start(\"Menu\");\n\t}\n\n}\n\nexport default Menu;\n",
    "class Preload extends Phaser.State {\n\n\tpreload() {\n\t\t/* Preload required assets */\n\t\t//this.game.load.image('myImage', 'assets/my-image.png');\n\t\t//this.game.load.audio('myAudio', 'assets/my-audio.wav');\n\t\t//this.game.load.atlas('myAtlas', 'assets/my-atlas.png', 'assets/my-atlas.json');\n\t}\n\n\tcreate() {\n\t\t//NOTE: Change to GameTitle if required\n\t\tthis.game.state.start(\"Main\");\n\t}\n\n}\n\nexport default Preload;\n"
  ]
}